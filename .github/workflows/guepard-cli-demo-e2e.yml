name: Guepard E2E Demo Scenarios (Playwright in Docker)

on:
  workflow_dispatch:

jobs:
  # Job 1: Build preconfigured Docker image with all dependencies
  build-custom-image:
    name: Build Dependency Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ghcr.io/${{ github.repository_owner }}/guepard-e2e-runner:${{ github.sha }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create Dockerfile for Runner
        run: |
          cat <<'EOF' > Dockerfile.runner
          FROM ubuntu:24.04
          
          ENV DEBIAN_FRONTEND=noninteractive
          RUN apt-get update && apt-get install -y --no-install-recommends \
              build-essential curl git sudo unzip ca-certificates procps file \
           && rm -rf /var/lib/apt/lists/*
          
          # Install Bun
          RUN curl -fsSL https://bun.sh/install | bash && \
              cp /root/.bun/bin/bun /usr/local/bin/bun && \
              cp /root/.bun/bin/bunx /usr/local/bin/bunx && \
              chmod +x /usr/local/bin/bun /usr/local/bin/bunx
          
          # Install Homebrew & Guepard CLI
          RUN useradd -ms /bin/bash linuxbrew && \
              echo "linuxbrew ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/linuxbrew
          USER linuxbrew
          WORKDIR /home/linuxbrew
          RUN /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          ENV PATH="/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:${PATH}"
          RUN brew tap guepard-corp/guepard && brew install guepard
          RUN mkdir -p /home/linuxbrew/.guepard
          USER root
          
          # Copy project code
          WORKDIR /app
          COPY . .
          
          # Backend setup
          WORKDIR /app/components/api
          RUN bun install --frozen-lockfile
          RUN bun prisma generate || echo "No schema found"
          
          # Frontend setup
          WORKDIR /app/components/frontend
          RUN bun install --frozen-lockfile
          RUN bunx playwright install --with-deps
          
          WORKDIR /app
          ENV PATH="/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:/usr/local/bin:/usr/local/sbin:/usr/bin:/bin"
          ENV DEBIAN_FRONTEND=noninteractive
          ENV NODE_ENV=production
          
          RUN mkdir -p /github/_work /__w/_temp /github/home && chmod -R 777 /github /__w || true
          
          WORKDIR /app
          CMD ["bash"]
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.runner
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/guepard-e2e-runner:${{ github.sha }}

  safe-feature-development-e2e:
    name: Scenario 1 (E2E) - Safe Feature Development
    runs-on: ubuntu-latest
    needs: build-custom-image
    container:
      image: ${{ needs.build-custom-image.outputs.image_tag }}
      env:
        DATABASE_URL: ${{ secrets.GUEPARD_DB_URL }}
        SHADOW_DATABASE_URL: ${{ secrets.GUEPARD_SHADOW_DB_URL }}
        GUEPARD_FEATURE_DB_URL: ${{ secrets.GUEPARD_FEATURE_DB_URL }}
        GUEPARD_API_KEY: ${{ secrets.GUEPARD_API_KEY }}
        VITE_API_BASE_URL: http://localhost:3001/api
        PLAYWRIGHT_BASE_URL: http://localhost:5173
        CI: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore Dependencies Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ./components/frontend/node_modules
            ./components/api/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install Dependencies if Cache Miss
        run: |
          cd components/frontend && bun install --frozen-lockfile
          cd ../api && bun install --frozen-lockfile

      - name: Install Playwright Browsers if Cache Miss
        working-directory: ./components/frontend
        run: bunx playwright install --with-deps

      # Scenario Execution
      - name: 0. Ensure Clean State & Baseline (Main Branch)
        working-directory: ./components/api
        run: |
          bunx prisma migrate deploy

      - name: 1. Create Feature Branch in Guepard
        run: |
          BRANCH_NAME="feature-discounts-e2e-${{ github.run_id }}"
          guepard branch create "$BRANCH_NAME" -b main -k
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          sleep 5

      - name: 2. Apply Code Patch Locally
        run: ./demo/demo-manager.sh apply discount-feature

      - name: 3. Resolve Baseline & Apply Migration to Feature Branch
        working-directory: ./components/api
        env:
          DATABASE_URL: ${{ env.GUEPARD_FEATURE_DB_URL }}
        run: |
          BASELINE_MIGRATION_ID=$(ls -t prisma/migrations | grep 'baseline' | head -n 1)
          bunx prisma migrate resolve --applied $BASELINE_MIGRATION_ID
          bunx prisma migrate deploy

      - name: 4. Build Frontend
        working-directory: ./components/frontend
        run: bun run build

      - name: 5. Start Backend (Main DB) & Run Playwright Test
        run: |
          cd components/api
          DATABASE_URL=${{ secrets.GUEPARD_DB_URL }} nohup bun run start > ../../backend.log 2>&1 &
          BACKEND_PID=$!
          cd ../..
          sleep 15
          cd components/frontend
          bunx playwright test tests/discount-feature.spec.ts --project=chromium --grep "@main"
          cd ../..
          kill $BACKEND_PID || echo "Backend already stopped."
          sleep 5

      - name: 6. Start Backend (Feature DB) & Run Playwright Test
        run: |
          cd components/api
          DATABASE_URL=${{ secrets.GUEPARD_DB_URL }} nohup bun run start > ../../backend.log 2>&1 &
          BACKEND_PID=$!
          cd ../..
          sleep 15
          cd components/frontend
          bunx playwright test tests/discount-feature.spec.ts --project=chromium --grep "@feature"
          cd ../..
          kill $BACKEND_PID || echo "Backend already stopped."

      - name: 7. Cleanup
        if: always()
        run: |
          echo "Cleaning up..."
          guepard checkout main
          if [ -n "$BRANCH_NAME" ]; then
            guepard branch delete "$BRANCH_NAME" --discard-changes true
          fi
