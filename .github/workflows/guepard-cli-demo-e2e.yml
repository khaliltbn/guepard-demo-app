name: Guepard E2E Demo Scenarios (Playwright)

on:
  workflow_dispatch: # Allow manual triggering

jobs:
  install-deps:
    # --- Same install-deps job as Version 1 ---
    # (Includes Checkout, Setup Bun, Install Backend/Frontend Deps, Cache, Install Playwright)
    name: Install Dependencies & Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        
      - name: Install Frontend Dependencies
        working-directory: ./components/frontend
        run: bun install --frozen-lockfile
        
      - name: Install Backend Dependencies
        working-directory: ./components/api
        run: bun install --frozen-lockfile
        
      - name: Install Playwright Browsers
        working-directory: ./components/frontend # Run where playwright is installed
        run: bunx playwright install --with-deps
        
      - name: Cache Bun Dependencies # Cache all node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ./components/frontend/node_modules
            ./components/api/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
            
      # Add Guepard CLI install/login steps here
      - name: Install Guepard CLI
        run: |
          echo "Installing Guepard CLI..."
          brew tap guepard-corp/guepard
          brew install guepard
          echo "guepard-cli installed successfully"
          
      - name: Login to Guepard
        run: |
          echo "Logging into Guepard..."
          guepard login --code ${{ secrets.GUEPARD_API_KEY }}
          echo "Successfully logged into Guepard"

  safe-feature-development-e2e:
    name: Scenario 1 (E2E) - Safe Feature Development
    runs-on: ubuntu-latest
    needs: install-deps
    env:
      # Use main DB URL for initial server start
      DATABASE_URL: ${{ secrets.GUEPARD_DB_URL }}
      SHADOW_DATABASE_URL: ${{ secrets.GUEPARD_SHADOW_DB_URL }}
      # Separate URL for the feature branch needed for specific steps
      GUEPARD_FEATURE_DB_URL: ${{ secrets.GUEPARD_FEATURE_DB_URL }} # Define this secret
      # GUEPARD_API_KEY: ${{ secrets.GUEPARD_API_KEY }}
      # For Frontend Build & Playwright Tests
      VITE_API_BASE_URL: http://localhost:3001/api
      PLAYWRIGHT_BASE_URL: http://localhost:5173 # Port frontend runs on
      CI: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        
      - name: Restore Cached Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ./components/frontend/node_modules
            ./components/api/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
            
      - name: Install Dependencies if Cache Miss
        run: |
          cd components/frontend && bun install --frozen-lockfile
          cd ../api && bun install --frozen-lockfile
          
      - name: Install Playwright Browsers if Cache Miss
        working-directory: ./components/frontend
        run: bunx playwright install --with-deps
        
      # --- Scenario Execution ---
      - name: 0. Ensure Clean State & Baseline (Main Branch)
        working-directory: ./components/api
        run: |
          # gp branch switch main
          # Baseline logic
          bunx prisma migrate deploy

      - name: 1. Create Feature Branch in Guepard
        run: |
          # gp branch create feature-discounts-e2e --from main
          sleep 5

      - name: 2. Apply Code Patch Locally
        run: ./demo/demo-manager.sh apply discount-feature

      - name: 3. Resolve Baseline & Apply Migration to Feature Branch
        working-directory: ./components/api
        env: # Override DATABASE_URL just for migration
           DATABASE_URL: ${{ env.GUEPARD_FEATURE_DB_URL }}
        run: |
          # Resolve baseline for the new branch
          BASELINE_MIGRATION_ID=$(ls -t prisma/migrations | grep 'baseline' | head -n 1) # Example
          bunx prisma migrate resolve --applied $BASELINE_MIGRATION_ID
          # Deploy new migration(s)
          bunx prisma migrate deploy

      - name: 4. Build Frontend
        working-directory: ./components/frontend
        run: bun run build # Build static assets

      - name: 5. Start Backend (Main DB) & Run Playwright Test
        run: |
          echo "Starting backend server (Main DB) in background..."
          cd components/api
          # Start backend using the MAIN DB URL
          DATABASE_URL=${{ secrets.GUEPARD_DB_URL }} nohup bun run start > ../../backend.log 2>&1 &
          BACKEND_PID=$!
          cd ../..
          echo "Backend PID: $BACKEND_PID"
          sleep 15 # Wait longer for server to start serving static files

          echo "Running Playwright tests against MAIN branch UI..."
          cd components/frontend
          bunx playwright test tests/discount-feature.spec.ts --project=chromium --grep "@main"
          cd ../..

          echo "Stopping backend..."
          kill $BACKEND_PID || echo "Backend already stopped."
          sleep 5

      - name: 6. Start Backend (Feature DB) & Run Playwright Test
        run: |
          echo "Starting backend server (Feature DB) in background..."
          cd components/api
          # Start backend using the same DATABASE_URL (Guepard handles branch isolation)
          DATABASE_URL=${{ secrets.GUEPARD_DB_URL }} nohup bun run start > ../../backend.log 2>&1 &
          BACKEND_PID=$!
          cd ../..
          echo "Backend PID: $BACKEND_PID"
          sleep 15

          echo "Running Playwright tests against FEATURE branch UI..."
          cd components/frontend
          bunx playwright test tests/discount-feature.spec.ts --project=chromium --grep "@feature"
          cd ../..

          echo "Stopping backend..."
          kill $BACKEND_PID || echo "Backend already stopped."

      - name: 7. Cleanup
        if: always()
        run: |
          echo "Cleaning up..."
          # gp branch switch main # Switch active back
          # gp branch delete feature-discounts-e2e -f # Delete branch
